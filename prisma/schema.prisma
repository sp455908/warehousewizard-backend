// Prisma schema aligned with Postgres production models
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  customer
  purchase_support
  sales_support
  supervisor
  warehouse
  accounts
  admin
}

enum StorageType {
  domestic_dry
  domestic_reefer
  bonded_dry
  bonded_reefer
  cfs_import
  cfs_export_dry
  cfs_export_reefer
}

enum QuoteStatus {
  pending
  processing
  quoted
  approved
  rejected
}

enum BookingStatus {
  pending
  confirmed
  active
  completed
  cancelled
}

enum CargoStatus {
  submitted
  approved
  processing
  completed
}

enum DeliveryStatus {
  requested
  scheduled
  in_transit
  delivered
}

enum DeliveryUrgency {
  standard
  express
  urgent
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
}

enum FormType {
  domestic_dry
  bonded_dry
  bonded_reefer
  cfs_import
  cfs_export
  cfs_export_dry
  refer_domestic_warehouse
}

// Core models
model User {
  id               String      @id @default(uuid())
  email            String      @unique
  passwordHash     String
  firstName        String
  lastName         String
  mobile           String?
  company          String?
  role             UserRole    @default(customer)
  isActive         Boolean     @default(true)
  isEmailVerified  Boolean     @default(false)
  isMobileVerified Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // relations
  quotes           Quote[]             @relation("UserQuotes")
  bookings         Booking[]           @relation("UserBookings")
  assignedQuotes   Quote[]             @relation("AssignedQuotes")
  otpVerifications OtpVerification[]   @relation("UserOtp")
  bookingsApproved Booking[]           @relation("BookingApprovedBy")
  cargoApproved    CargoDispatchDetail[] @relation("CargoApprovedBy")
  deliveryRequests DeliveryRequest[]    @relation("DeliveryCustomer")
  invoices         Invoice[]            @relation("InvoiceCustomer")
  formSubmissions  FormSubmission[]     @relation("FormCustomer")
}

model OtpVerification {
  id         String   @id @default(uuid())
  user       User     @relation("UserOtp", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  type       String
  code       String
  expiresAt  DateTime
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Warehouse {
  id              String       @id @default(uuid())
  name            String
  location        String
  city            String
  state           String
  storageType     StorageType
  totalSpace      Int
  availableSpace  Int
  pricePerSqFt    Float
  features        Json?
  imageUrl        String?
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // relations
  quotes          Quote[]
  bookings        Booking[]
  formSubmissions FormSubmission[] @relation("FormWarehouse")
}

model Quote {
  id                  String       @id @default(uuid())
  customer            User         @relation("UserQuotes", fields: [customerId], references: [id], onDelete: Cascade)
  customerId          String
  storageType         String
  requiredSpace       Int
  preferredLocation   String
  duration            String
  specialRequirements String?
  status              QuoteStatus  @default(pending)
  assignedToUser      User?        @relation("AssignedQuotes", fields: [assignedTo], references: [id], onDelete: SetNull)
  assignedTo          String?
  finalPrice          Float?
  warehouse           Warehouse?   @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
  warehouseId         String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // relations
  bookings            Booking[]
  formSubmissions     FormSubmission[] @relation("FormQuote")
}

model Booking {
  id           String        @id @default(uuid())
  quote        Quote         @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId      String
  customer     User          @relation("UserBookings", fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String
  warehouse    Warehouse     @relation(fields: [warehouseId], references: [id])
  warehouseId  String
  status       BookingStatus @default(pending)
  startDate    DateTime
  endDate      DateTime
  totalAmount  Float
  approvedBy   User?         @relation("BookingApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // relations
  cargoItems   CargoDispatchDetail[]
  deliveries   DeliveryRequest[]
  invoices     Invoice[]
}

model CargoDispatchDetail {
  id               String      @id @default(uuid())
  booking          Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId        String
  itemDescription  String
  quantity         Int
  weight           Float?
  dimensions       String?
  specialHandling  String?
  status           CargoStatus @default(submitted)
  approvedBy       User?       @relation("CargoApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById     String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model DeliveryRequest {
  id               String         @id @default(uuid())
  booking          Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId        String
  customer         User           @relation("DeliveryCustomer", fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String
  deliveryAddress  String
  preferredDate    DateTime
  urgency          DeliveryUrgency @default(standard)
  status           DeliveryStatus   @default(requested)
  assignedDriver   String?
  trackingNumber   String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Invoice {
  id             String        @id @default(uuid())
  booking        Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  customer       User          @relation("InvoiceCustomer", fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  invoiceNumber  String        @unique
  amount         Float
  status         InvoiceStatus @default(draft)
  dueDate        DateTime
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model FormSubmission {
  id           String    @id @default(uuid())
  customer     User?     @relation("FormCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  customerId   String?
  warehouse    Warehouse? @relation("FormWarehouse", fields: [warehouseId], references: [id], onDelete: SetNull)
  warehouseId  String?
  quote        Quote?    @relation("FormQuote", fields: [quoteId], references: [id], onDelete: SetNull)
  quoteId      String?
  type         FormType
  data         Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WorkflowEvent {
  id             String   @id @default(uuid())
  entityType     String
  entityId       String
  fromStage      String?
  toStage        String
  action         String
  routedToRole   String?
  routedToUserId String?
  actorUserId    String?
  payload        Json?
  createdAt      DateTime @default(now())
}

